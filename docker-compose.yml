version: '3.8'

services:
  gateway:
    build:
      context: ./
      dockerfile: ./gateway/docker/development/nginx/Dockerfile
    networks:
      - auction
    ports:
      - "80:80"
      - "8080:80"
      - "8081:80"
      - "8082:80"
    depends_on:
      - frontend
  frontend:
    build:
      context: ./
      dockerfile: ./frontend/docker/development/nginx/Dockerfile
    networks:
      - auction
    volumes:
      - ./frontend:/app
    depends_on:
      - api
  api:
    build:
      context: ./
      dockerfile: ./api/docker/development/nginx/Dockerfile
    networks:
      - auction
    environment:
      APP_ENV: dev
      APP_DEBUG: 1
      FRONTEND_URL: http://frontend:80
      DB_DRIVER: postgres
      DB_USERNAME: postgres
      DB_USER: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_DBNAME: postgres
      DB_NAME: postgres
      DB_PASSWORD: qwerty
      DB_SSLMODE: disable
      API_PORT: 80
#    volumes:
#      - ./api:/app
#    secrets:
#      - jwt_public_key
#      - jwt_private_key
    command: sh -c "service nginx restart && ./auction-house-api-app"

networks:
  auction:
    driver: overlay
    attachable: true
    
# для чего эти ноды? если пхп-шное - попробовать оботись без
#  frontend-node:
#    build:
#      context: frontend/docker/development/node
#    volumes:
#      - ./frontend:/app
#    command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && yarn start"
#    tty: true
#
#  frontend-node-cli:
#    build:
#      context: frontend/docker/development/node
#    volumes:
#      - ./frontend:/app
#  api-postgres:
#    image: postgres:13.3-alpine
#    environment:
#      POSTGRES_USER: app
#      POSTGRES_PASSWORD: secret
#      POSTGRES_DB: app
#    volumes:
#      - api-postgres:/var/lib/postgresql/data
#    ports:
#      - "54321:5432"
#
#  mailer:
#    image: mailhog/mailhog
#
#  cucumber-node-cli:
#    build:
#      context: cucumber/docker/development/node
#    volumes:
#      - ./cucumber:/app
#
#secrets:
#  jwt_public_key:
#    file: ./docker/development/secrets/jwt_public.key
#  jwt_private_key:
#    file: ./docker/development/secrets/jwt_private.key
#
#volumes:
#  api-postgres:

  ========================
  version: "3.9" - swarm не умеет, может компоуз сможет? source: ./.database/postgres/data
services:
    gateway:
        image: ${REGISTRY}/${LOGIN}/auction-gateway:${IMAGE_TAG}
        volumes:
            - /var/www/html:/var/www/html:ro
        ports:
            - "80:80"
            - "8080:8080"
            - "8081:8081"
            - "8082:8082"
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
            placement:
                constraints: [node.role == manager]

    frontend:
        image: ${REGISTRY}/${LOGIN}/auction-frontend:${IMAGE_TAG}
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
        depends_on:
            - api

    api:
        image: ${REGISTRY}/${LOGIN}/auction-api:${IMAGE_TAG}
        environment:
            APP_ENV: dev
            APP_DEBUG: 1
            API_PORT: 8081
            SENTRY_DSN: ${SENTRY_DSN}
            POSTGRES_HOST: db
            POSTGRES_PASSWORD: qwerty
            POSTGRES_PORT: 5432
            POSTGRES_USER: postgres
            POSTGRES_DB: postgres
            POSTGRES_SSL_MODE: disable
            PGDATA: /var/lib/postgresql/data
            GIN_MODE: release
        volumes:
            - ./secrets:/run/secrets:ro
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 5s
        depends_on:
            - db
    # db:
    #     image: ${REGISTRY}/${LOGIN}/auction-db:${IMAGE_TAG}
    #     environment:
    #         POSTGRES_PASSWORD: qwerty
    #         POSTGRES_USER: postgres
    #         POSTGRES_DB: postgres
    #     volumes:
    #         - db:/var/lib/postgresql/data
    #     ports:
    #         - "5432:5432"
    #     deploy:
    #         mode: replicated
    #         replicas: 1
    #         update_config:
    #             parallelism: 1
    #             delay: 5s

    # api-migration:
    #     image: ${REGISTRY}/auction-api-php-cli:${IMAGE_TAG}
    #     environment:
    #         APP_ENV: prod
    #         APP_DEBUG: 0
    #         DB_HOST: api-postgres
    #         DB_USER: app
    #         DB_PASSWORD: ${API_DB_PASSWORD}
    #         DB_NAME: app
    #         MAILER_HOST: ${API_MAILER_HOST}
    #         MAILER_PORT: ${API_MAILER_PORT}
    #         MAILER_USER: ${API_MAILER_USER}
    #         MAILER_PASSWORD: ${API_MAILER_PASSWORD}
    #         MAILER_ENCRYPTION: tls
    #         MAILER_FROM_EMAIL: ${API_MAILER_FROM_EMAIL}
    #         FRONTEND_URL: https://demo-auction.deworker.pro
    #         SENTRY_DSN: ${SENTRY_DSN}
    #         JWT_ENCRYPTION_KEY: ${JWT_ENCRYPTION_KEY}
    #         JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key
    #         JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
    #     secrets:
    #         - jwt_public_key
    #         - jwt_private_key
    #     command: sh -c 'wait-for-it api-postgres:5432 -t 60 && php bin/app.php migrations:migrate --no-interaction' #  как сделать запуск миграций
    #     deploy:
    #         restart_policy:
    #             condition: on-failure
    #             delay: 5s
    #             max_attempts: 5
    #             window: 120s
    db:
        image: ${REGISTRY}/${LOGIN}/auction-db:${IMAGE_TAG}
        environment:
            POSTGRES_PASSWORD: qwerty
            POSTGRES_USER: postgres
            POSTGRES_DB: postgres
        #volumes:
        #    - db:/var/lib/postgresql/data
        volumes:
            - type: volume
                source: ./.database/postgres/data
                target: /var/lib/postgresql/data
                volume:     #  configure additional volume options
                    nocopy: true #  flag to disable copying of data from a container when a volume is created
            - type: bind    # configure additional bind options
                source: ./.database/postgres/data
                target: /var/lib/postgresql/data
        ports:
            - "5432:5432"
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 5s

#volumes:
#    db:

    #secrets:
#    sentry_dsn:
#        file: ./secrets/sentry_dsn.txt
