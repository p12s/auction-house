image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - deploy

before_script:
  - apk add --update curl && rm -rf /var/cache/apk/*
  - echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin $REGISTRY_URL

build:
  stage: build
  except:
    - tags
  script:
    - let NEW_VERSION_PATCH=$VERSION_PATCH+1
    - VERSION=v$VERSION_MAJOR.$VERSION_MINOR.$NEW_VERSION_PATCH
    - echo "Build TAG is $VERSION"

    - docker --log-level=debug build --pull --file=gateway/docker/production/nginx/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-gateway:$VERSION gateway
    - docker --log-level=debug build --pull --file=gateway/docker/production/nginx/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-gateway:latest gateway
    - docker --log-level=debug build --pull --file=frontend/docker/production/nginx/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-frontend:$VERSION frontend
    - docker --log-level=debug build --pull --file=frontend/docker/production/nginx/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-frontend:latest frontend
    - docker --log-level=debug build --pull --file=api/docker/production/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-api:$VERSION api
    - docker --log-level=debug build --pull --file=api/docker/production/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-api:latest api
    - docker --log-level=debug build --pull --file=db/docker/production/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-db:$VERSION db
    - docker --log-level=debug build --pull --file=db/docker/production/Dockerfile --tag=$REGISTRY_URL/$REGISTRY_USER/auction-db:latest db

    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-gateway:$VERSION
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-gateway:latest
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-frontend:$VERSION
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-frontend:latest
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-api:$VERSION
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-api:latest
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-db:$VERSION
    - docker push $REGISTRY_URL/$REGISTRY_USER/auction-db:latest

test: # запуск тестов в докере? куа?
  stage: test
  script:
    - echo "Fake test is OK 👍👍"

release:
  stage: release
  script:
    - let NEW_VERSION_PATCH=$VERSION_PATCH+1
    - VERSION=v$VERSION_MAJOR.$VERSION_MINOR.$NEW_VERSION_PATCH
    - echo "Release TAG is $VERSION"
  after_script:
    - let NEW_VERSION_PATCH=$VERSION_PATCH+1
    - echo "Saved current patch is $NEW_VERSION_PATCH"
    - 'curl --request PUT --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/28552814/variables/VERSION_PATCH" --form "value=$NEW_VERSION_PATCH"'


deploy:
  stage: deploy
  script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - cat /etc/os-release
    - apk update && apk add bash -y && apk update && apk add gettext
    - envsubst --version

    - eval $(ssh-agent -s)
    - echo "$SSH_YC_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - let NEW_VERSION_PATCH=$VERSION_PATCH+1
    - VERSION=v$VERSION_MAJOR.$VERSION_MINOR.$NEW_VERSION_PATCH
    - echo "Deploy TAG is $VERSION"

    - ssh -o StrictHostKeyChecking=no deploy@$HOST -p $PORT 'rm -rf site_$VERSION'
    - ssh -o StrictHostKeyChecking=no deploy@$HOST -p $PORT 'mkdir site_$VERSION'
    - envsubst < docker-compose-production.yml > docker-compose-production-env.yml
    - scp -o StrictHostKeyChecking=no -P ${PORT} docker-compose-production-env.yml deploy@${HOST}:site_$VERSION/docker-compose.yml
    - rm -f docker-compose-production-env.yml
    - ssh -o StrictHostKeyChecking=no deploy@$HOST -p $PORT 'mkdir site_$VERSION/secrets'
    - ssh -o StrictHostKeyChecking=no deploy@$HOST -p $PORT 'cd site_$VERSION && docker stack deploy --compose-file docker-compose.yml auction --with-registry-auth --prune'
